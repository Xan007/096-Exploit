local TableUtil = loadstring(game:HttpGet(('https://raw.githubusercontent.com/Xan007/096-Exploit/master/utils/TableUtil.lua?token='..getgenv().Token)))()

local LocalPlayer = game:GetService("Players").LocalPlayer
local HttpService = game:GetService("HttpService")

local GetDataRemote = game:GetService("ReplicatedStorage").Remotes.GetData
local BackpackRemote = game:GetService("ReplicatedStorage").Remotes.Backpack
local ObjectInteractRemote = game:GetService("ReplicatedStorage").Remotes.ObjectInteract

local PickupRemote = game:GetService("ReplicatedStorage").Remotes.Pickup
local DropRemote = game:GetService("ReplicatedStorage").Remotes.Drop

local Data = nil

local Functions = {}

function Functions.UpdateData()
    local InvokeReturn = game:GetService("ReplicatedStorage").Remotes.GetData:InvokeServer()

    if (InvokeReturn) then
        Data = InvokeReturn
    end

    return InvokeReturn
end

function Functions.GetBackpackItems(backpack)
    backpack = backpack or Data.Backpack

    local items = TableUtil.Filter(backpack, function(value, key)
        return value[1] ~= "None"
    end)

    return items
end

function Functions.GetItemAmount(name)
    local amount = 0

    for _, itemTable in ipairs(Functions.GetBackpackItems()) do
        if (name ~= "Any" and itemTable[1] ~= name) then
            continue
        end
        
        amount = amount + itemTable[2]
    end

    return amount
end

function Functions.DropItem(name)
    local SavedAmount = Functions.GetItemAmount(name)

    if (SavedAmount == 0) then
        return false
    end

    local args = {
        [1] = "Drop",
        [2] = name
    }  

    repeat
        BackpackRemote:FireServer(unpack(args))
        Functions.UpdateData()
    until SavedAmount > Functions.GetItemAmount(name)

    return true
end

function Functions.SaveItem(pathToItem)
    if (pathToItem == nil or pathToItem.Parent == nil) then
        return false
    end

    local ItemCFrame = pathToItem.PrimaryPart.CFrame

    local ItemsAmount = Functions.GetItemAmount("Any")
    local NewItemAmount = 0

    if (pathToItem:GetAttribute("Type") == "Food") then
        NewItemAmount = 1
    elseif (pathToItem:GetAttribute("Type") == "Tool") then
        NewItemAmount = 4
    else
        return false
    end
    
    local SavedItems = Functions.GetBackpackItems()
    
    if (ItemsAmount + NewItemAmount) > 30 then
        return false
    end

    if (#SavedItems >= 6) then
        local result = TableUtil.Some(SavedItems, function(value)
            return value[1] == pathToItem.Name and NewItemAmount == 1
        end)

        if result == false then
            return false
        end
    end

    local args = {
        [1] = pathToItem
    }

    repeat
        LocalPlayer.Character.HumanoidRootPart.CFrame = ItemCFrame
        ObjectInteractRemote:FireServer(unpack(args))
        
        Functions.UpdateData()
    until #Functions.GetBackpackItems() > #SavedItems or pathToItem == nil or pathToItem.Parent == nil

    return true
end


function Functions.Pickup(pathToObject)
    if (pathToObject:GetAttribute("Owner") ~= nil and pathToObject:GetAttribute("Owner") ~= LocalPlayer.UserId) then
        return false
    end

    local args = {
        [1] = pathToObject
    }
    
    repeat
        LocalPlayer.Character.HumanoidRootPart.CFrame = pathToObject.PrimaryPart.CFrame
        PickupRemote:FireServer(unpack(args))
        wait()
    until pathToObject:GetAttribute("PickedUp") == true
end

function Functions.PlaceDrop(position, orientation, sticky)
    local args = {
        [1] = position,
        [2] = orientation,
        [3] = sticky
    }
    
    return DropRemote:InvokeServer(unpack(args))
end

return Functions